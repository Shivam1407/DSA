BINARY SEARCH IN A ROTATED ARRAY :

HOW TO THINK...............................................................................................................................................................................

Key Observation: Though the array is rotated, we can clearly notice that for every index, one of the 2 halves will always be sorted. In the above example, the right half of the index mid is sorted.

So, to efficiently search for a target value using this observation, we will follow a simple two-step process. 

First, we identify the sorted half of the array. 
Once found, we determine if the target is located within this sorted half. 
If not, we eliminate that half from further consideration. 
Conversely, if the target does exist in the sorted half, we eliminate the other half.
...........................................................................................................................................................................................


RECURRSIVE METHOD:

int search(vector<int>& arr, int low, int high, int k) {
    if (low > high)
        return -1;

    int mid = (low + high) / 2;

    if (arr[mid] == k)
        return mid;

    if (arr[low] <= arr[mid]) {
        if (arr[low] <= k && k <= arr[mid])
            return search(arr, low, mid - 1, k);
        else
            return search(arr, mid + 1, high, k);
    }
    else {
        if (arr[mid] <= k && k <= arr[high])
            return search(arr, mid + 1, high, k);
        else
            return search(arr, low, mid - 1, k);
    }
}
............................................................................................................................................................................................


ITERATIVE APPROACH:
int search(vector<int>& arr, int n, int k) {
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = (low + high) / 2;

        //if mid points the target
        if (arr[mid] == k) return mid;

        //if left part is sorted:
        if (arr[low] <= arr[mid]) {
            if (arr[low] <= k && k <= arr[mid]) {
                //element exists:
                high = mid - 1;
            }
            else {
                //element does not exist:
                low = mid + 1;
            }
        }
        else { //if right part is sorted:
            if (arr[mid] <= k && k <= arr[high]) {
                //element exists:
                low = mid + 1;
            }
            else {
                //element does not exist:
                high = mid - 1;
            }
        }
    }
    return -1;
}
